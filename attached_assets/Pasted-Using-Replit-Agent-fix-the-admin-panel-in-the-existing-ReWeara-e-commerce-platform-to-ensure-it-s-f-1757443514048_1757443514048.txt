Using Replit Agent, fix the admin panel in the existing ReWeara e-commerce platform to ensure it's fully working, secure, and controls all features as specified. Proceed iteratively with checkpoints: Start by debugging current issues (e.g., login failures, CRUD errors, non-responsive UI), then integrate missing controls for every site aspect (products, users, orders, payments, AI, visuals, notifications, analytics), and end with testing for real-time API updates, no fake data (start empty, populate dynamically), and professional error-free operation. Use positive, direct language; reference the project's tech stack (React/Next.js frontend, Node/Express backend, MongoDB, Firebase auth, Gemini AI); curate context from previous builds (e.g., admin login: bcrypt with email itsnainskashyap@gmail.com, password nains@1357, add 2FA OTP). Output fixed code snippets where needed, and specify tests (e.g., "Simulate order approval, verify status update").
Checkpoint 1: Debug & Secure Login/Dashboard
Identify/fix bugs: Check console for errors (e.g., JWT auth failures, bcrypt mismatches); ensure HTTPS enforcement, CAPTCHA on login, input validation (no SQL injection). Add 2FA (Twilio/SMS for OTP, fallback email).
Dashboard UI: Responsive grid (Tailwind classes like grid-cols-1 md:grid-cols-3), with charts (Chart.js for sales/traffic, no fake data—pull from DB), recent activity log (paginated table), search bar (fuzzy on users/orders).
Fixes: If panel loads empty, verify DB connection (Mongo Atlas URI as secret); handle "no data" states with messages like "Add products to populate". Test: Login as admin, verify dashboard loads real metrics (e.g., 0 orders initially).
Code Snippet for Login (fix in /api/admin/login.js):
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

app.post('/api/admin/login', async (req, res) => {
  const { email, password, otp } = req.body;
  if (email !== 'itsnainskashyap@gmail.com') return res.status(401).json({ error: 'Invalid email' });
  const validPass = await bcrypt.compare(password, '$2a$10$...'); // Hashed 'nains@1357'
  if (!validPass) return res.status(401).json({ error: 'Invalid password' });
  // Add 2FA: Verify OTP (e.g., from session or Twilio)
  if (!verifyOTP(otp)) return res.status(401).json({ error: 'Invalid OTP' });
  const token = jwt.sign({ role: 'admin' }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});
Checkpoint 2: Integrate Full CRUD & Management for All Features
Product Management: CRUD interface (forms with previews: title, desc, images via Cloudinary upload, stock, price, discounts, categories, filters—bulk CSV import). Fix issues like image upload failures (multer middleware). Controls: Assign to Thrift/Originals, eco-badges, AI-related (e.g., generate desc via Gemini prompt).
User/Order Management: User list (search/edit/reset/ban, paginated table); Orders (search/filter by ID/status/date, approve UPI via dropdown—auto-email on update, generate PDF invoices with jsPDF). Fix abandoned carts view (list with recovery email button).
Payment/Notifications: UPI settings (QR/ID upload, preview); Coupon CRUD (codes/expiry, test apply); Notification sender (bulk to users, templates editor with MJML for emails).
Page/Content Management: Edit static pages (About/FAQs/Blog/Careers—rich text CKEditor), form submissions (Contact list/export CSV).
Brand/Banner Management: Brands (CRUD logos, drag-drop reorder, visibility toggle); Banners/Hero (carousel upload, AI-generate cartoon bg via Gemini—prompt input with preview modal).
AI Controls: Toggle recs/try-on/background gen; edit prompts (e.g., "Overlay clothing realistically"), usage dashboard (calls/costs via Gemini billing query), threshold sliders (similarity 0.8 default).
Theme/UX Controls: Edit colors/fonts/animations (live preview iframe), micros (haptics toggle), CTA customizations (+ button size).
Analytics/Audit: Revenue/hot products charts (real DB data), audit logs (who/when changed what—table with filters).
Fixes: Ensure real-time updates (WebSockets via Socket.io for DB changes); handle empty states (e.g., "No orders yet—start selling!"); mobile-responsive (Tailwind breakpoints).
Code Snippet for Product CRUD (fix in /admin/products.js – React component):
import { useState } from 'react';

const ProductForm = () => {
  const [formData, setFormData] = useState({ title: '', desc: '', image: '' });
  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await fetch('/api/products', { method: 'POST', body: JSON.stringify(formData), headers: { Authorization: Bearer ${localStorage.token} } });
    if (res.ok) alert('Product added!'); else alert('Error: ' + res.statusText); // Fix error handling
  };
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <input type="text" placeholder="Title" value={formData.title} onChange={(e) => setFormData({ ...formData, title: e.target.value })} required />
      {/* Add fields for all attrs, image upload with preview */}
      <button type="submit" className="bg-green-600 text-white px-4 py-2 rounded">Add Product</button>
    </form>
  );
};
Checkpoint 3: Test & Optimize Full Panel
End-to-End Tests: Simulate flows (e.g., add product → verify frontend update; approve order → check email trigger via Nodemailer). Fix bugs like non-syncing data (use React Query for caching/invalidation).
Performance: Lazy-load sections, paginate large lists (e.g., orders >50). Security: Role-based access (JWT middleware—admin only).
Deployment: Ensure panel routes protected (/admin/*); test in Replit preview (mobile/desktop).
Verify All Features: Cross-check against specs (e.g., AI toggles work, no fakes—DB empty init). If issues, rollback to last checkpoint and refine.